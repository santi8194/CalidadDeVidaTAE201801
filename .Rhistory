shiny::runApp('Documents/University/TAE/Entrega1/WebApp')
View(hogar)
View(hogar)
runApp('Documents/University/TAE/Entrega1/WebApp')
View(parejas)
View(parejas)
View(parejas)
View(parejas)
View(parejas)
runApp('Documents/University/TAE/Entrega1/WebApp')
View(parejas)
View(parejas)
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
View(hogar)
View(hogar)
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
runApp('Documents/University/TAE/Entrega1/WebApp')
install.packages("mvtnorm")
install.packages("MBESS")
install.packages("Matrix")
install.packages("ks")
M_cor<-matrix(c(1,0.8,0.8,0.8,1,0.8,0.8,0.8,1),ncol=3)
print(M_cor)
M_cov<-cor2cov(M_cor,sd=c(1.2,1.3,2))
print(M_cov)
library(mvtnorm)
library(MBESS)
library(Matrix)
library(ks)
M_cov<-cor2cov(M_cor,sd=c(1.2,1.3,2))
print(M_cov)
M_cov_pd<-as.matrix(nearPD(M_cov)$mat)
print(M_cov_pd)
n1<-50 # Tamaño de la muestra 1
n2<-80 # Tamaño de la muestra 2
mu1<-c(1,1.5,1) # Vector de medias de la muestra 1
mu2<-c(-1,1.5,1) # Vector de medias de la muestra 2
set.seed(1)
muestra1<-rmvnorm(n=n1,mean=mu1,sigma=M_cov_pd,method="eigen")
muestra2<-rmvnorm(n=n2,mean=mu2,sigma=M_cov_pd,method="eigen")
muestra<-rbind(muestra1,muestra2)
clase<-c(rep("1",n1),rep("2",n2))
muestra_df<-data.frame(muestra,clase)
pairs(muestra_df[,1:3],col=muestra_df$clase)
fhat.muestra1 <- kde(x=muestra1[,c(1,2)], binned=TRUE)
plot(fhat.muestra1, display="filled.contour2", cont=seq(10,90,by=10))
grid()
contourLevels(fhat.muestra1, cont=c(75, 50, 25))
X1_hat<-mu1[1]+M_cov_pd[1,1:2]%*%solve(M_cov_pd[2:3,2:3])%*%(t(muestra1[,2:3])-mu1[2:3])
plot(muestra1[,1],X1_hat,ylab="X1 estimado",xlab="X1 real")
abline(a=0,b=1)
grid()
datos_advertising<-read.csv("Advertising.csv")
datos_advertising<-datos_advertising[,-1]
pairs(datos_advertising)
datos_advertising<-read.csv("Advertising.csv")
datos_advertising<-datos_advertising[,-1]
pairs(datos_advertising)
datos_advertising<-read.csv("Advertising.csv")
datos_advertising<-datos_advertising[,-1]
pairs(datos_advertising)
setwd("~/Documents/University/TAE/Entrega1/Practica Sep 5")
datos_advertising<-read.csv("Advertising.csv")
datos_advertising<-datos_advertising[,-1]
pairs(datos_advertising)
datos_advertising<-read.csv("Advertising.csv")
datos_advertising<-datos_advertising[,-1]
pairs(datos_advertising)
set.seed(1) # fija la semilla del generador de números
# aleatorios para obtener resultados reproducibles
p_tr<-0.7 #porcentaje de datos usados para el entrenamiento
N_datos<-dim(datos_advertising)[1] # número de registros del conjunto de datos
n_tr<-round(N_datos*p_tr) # este será el tamaño del conjunto de entrenamiento
ix_tr<-sample(N_datos,n_tr,replace = FALSE) # genera una muestra de índices
datos_tr<-datos_advertising[ix_tr,] # conjunto de entrenamiento
datos_vl<-datos_advertising[-ix_tr,] # conjunto de validación validación
install.packages("caret")
adv_knn<-knnreg(sales~TV+radio+newspaper,data=datos_tr,k=3) # evalúa el método con k=3
y_tr_pred<-predict(adv_knn,datos_tr)
mse_tr<-mean((datos_tr$sales-y_tr_pred)^2) # calcula el mse de entrenamiento
(mse_tr)
library(caret)
adv_knn<-knnreg(sales~TV+radio+newspaper,data=datos_tr,k=3) # evalúa el método con k=3
y_tr_pred<-predict(adv_knn,datos_tr)
mse_tr<-mean((datos_tr$sales-y_tr_pred)^2) # calcula el mse de entrenamiento
(mse_tr)
y_vl_pred<-predict(adv_knn,datos_vl)
mse_vl<-mean((datos_vl$sales-y_vl_pred)^2)
(mse_vl)
mse_k<-function(k,data_tr,data_vl,formula_mod){
adv_knn<-knnreg(formula_mod,data=datos_tr,k=k) # entrenamiento del modelo
y_tr_pred<-predict(adv_knn,datos_tr) # predicción de los valores de entrenamiento
mse_tr<-mean((datos_tr$sales-y_tr_pred)^2) # mse del entrenamiento
y_vl_pred<-predict(adv_knn,datos_vl) # predicción de los valores de prueba
mse_vl<-mean((datos_vl$sales-y_vl_pred)^2) # mse de validación
return(list(mse_tr=mse_tr,mse_vl=mse_vl))
}
modelo<-formula("sales~TV+radio+newspaper")
mse_k(k=2,data_tr=data_tr,data_vl = data_vl,formula_mod = modelo)
MSE<-lapply(1:n_tr,mse_k,data_tr=data_tr,data_vl = data_vl,formula_mod = modelo)
mse_tr<-sapply(1:n_tr,function(x,y){`[[`(y,x)$mse_tr},y=MSE)
mse_vl<-sapply(1:n_tr,function(x,y){`[[`(y,x)$mse_vl},y=MSE)
num_vec<-1:n_tr
plot(num_vec,mse_tr,type="l",col="blue",lwd=2,xlab="k, número de vecinos",
ylab="MSE (unidades vendidas)")
lines(num_vec,mse_vl,col="red",lwd=2)
grid()
legend("topleft",col=c("red","blue"),lwd=2,
legend=c("Validación","Entrenamiento"))
num_vec<-1:n_tr
plot(num_vec,mse_tr,type="l",col="blue",lwd=2,xlab="k, número de vecinos",
ylab="MSE (unidades vendidas)",xlim=c(0,10),ylim=c(0,4))
lines(num_vec,mse_vl,col="red",lwd=2)
grid()
legend("topleft",col=c("red","blue"),lwd=2,
legend=c("Validación","Entrenamiento"))
setwd("~/Documents/University/TAE/Entrega1/WebApp")
runApp()
parejas <- sqldf(paste("select ORDEN, P6071S1 from madres where P6071 = 1", sep=" "), dbname = "CYCH2017", user = "")
fromNodes <- parejas["ORDEN"]
toNodes <- parejas["P6071S1"]
parejas <- sqldf(paste("select ORDEN, P6071S1 from madres where P6071 = 1 and DIRECTORIO =",dir, sep=" "), dbname = "CYCH2017", user = "")
fromNodes <- parejas["ORDEN"]
toNodes <- parejas["P6071S1"]
parejas <- sqldf(paste("select ORDEN, P6071S1 from madres where P6071 = '1.0' and DIRECTORIO =",dir, sep=" "), dbname = "CYCH2017", user = "")
fromNodes <- parejas["ORDEN"]
toNodes <- parejas["P6071S1"]
parejas <- sqldf(paste("select ORDEN, P6071S1 from madres where P6071 = 1.0 and DIRECTORIO =",dir, sep=" "), dbname = "CYCH2017", user = "")
fromNodes <- parejas["ORDEN"]
toNodes <- parejas["P6071S1"]
hogar <- sqldf(paste("select * from madres where DIRECTORIO =",dir, sep=" "), dbname = "CYCH2017", user = "")
View(fromNodes)
hogar <- sqldf(paste("select * from madres where DIRECTORIO =",dir, sep=" "), dbname = "CYCH2017", user = "")
runApp()
View(fromNodes)
View(fromNodes)
runApp()
fromNodes["P6071S1"]
fromNodes["ORDEN"]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dirs <- sqldf("select distinct LLAVEHOG from madres", dbname = "CYCH2017", user = "")
View(dirs)
View(dirs)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
